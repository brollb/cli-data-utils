#! /usr/bin/env python3
import argparse
import sys
import math

# Read in out from uniq -c and convert it to a distribution
parser = argparse.ArgumentParser()
parser.add_argument('infile', nargs='?')
parser.add_argument('-m', '--min', default=0, type=float)
parser.add_argument('-r', '--round', default=2, type=int)
args = parser.parse_args()

input = sys.stdin if args.infile is None else args.infile

lines = []
total = 0
for line in input:
    count = line.strip().split(' ')[0]
    val = ' '.join(line.strip().split(' ')[1:])
    count = int(count)
    total += count
    lines.append((count, val))

valid_lines = []
for line in lines:  # Filter out values < min
    count, val = line
    ratio = count/total
    if ratio >= args.min:
        valid_lines.append((count, val))

total = sum([ count for (count, val) in valid_lines ])
for line in valid_lines:
    count, val = line
    ratio = count/total
    if ratio >= args.min:
        ratio = round(math.pow(10, args.round) * count/total)/math.pow(10, args.round)
        print(ratio, val)
